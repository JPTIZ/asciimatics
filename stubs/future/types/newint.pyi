from typing import Any

long = int

class BaseNewInt(type):
    def __instancecheck__(cls, instance: Any): ...

class newint(long, metaclass=BaseNewInt):
    def __new__(cls, x: int = ..., base: int = ...): ...
    def __add__(self, other: Any): ...
    def __radd__(self, other: Any): ...
    def __sub__(self, other: Any): ...
    def __rsub__(self, other: Any): ...
    def __mul__(self, other: Any): ...
    def __rmul__(self, other: Any): ...
    def __div__(self, other: Any): ...
    def __rdiv__(self, other: Any): ...
    def __idiv__(self, other: Any): ...
    def __truediv__(self, other: Any): ...
    def __rtruediv__(self, other: Any): ...
    def __itruediv__(self, other: Any): ...
    def __floordiv__(self, other: Any): ...
    def __rfloordiv__(self, other: Any): ...
    def __ifloordiv__(self, other: Any): ...
    def __mod__(self, other: Any): ...
    def __rmod__(self, other: Any): ...
    def __divmod__(self, other: Any): ...
    def __rdivmod__(self, other: Any): ...
    def __pow__(self, other: Any): ...
    def __rpow__(self, other: Any): ...
    def __lshift__(self, other: Any): ...
    def __rshift__(self, other: Any): ...
    def __and__(self, other: Any): ...
    def __or__(self, other: Any): ...
    def __xor__(self, other: Any): ...
    def __neg__(self): ...
    def __pos__(self): ...
    def __abs__(self): ...
    def __invert__(self): ...
    def __int__(self): ...
    def __nonzero__(self): ...
    def __bool__(self): ...
    def __native__(self): ...
    def to_bytes(self, length: Any, byteorder: str = ..., signed: bool = ...): ...
    @classmethod
    def from_bytes(cls, mybytes: Any, byteorder: str = ..., signed: bool = ...): ...
