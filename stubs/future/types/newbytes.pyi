from typing import Any, Optional

unicode = str

class BaseNewBytes(type):
    def __instancecheck__(cls, instance: Any): ...

class newbytes(_builtin_bytes, metaclass=BaseNewBytes):
    def __new__(cls, *args: Any, **kwargs: Any): ...
    def __getitem__(self, y: Any): ...
    def __getslice__(self, *args: Any): ...
    def __contains__(self, key: Any): ...
    def __add__(self, other: Any): ...
    def __radd__(self, left: Any): ...
    def __mul__(self, other: Any): ...
    def __rmul__(self, other: Any): ...
    def __mod__(self, vals: Any): ...
    def __imod__(self, other: Any): ...
    def join(self, iterable_of_bytes: Any): ...
    @classmethod
    def fromhex(cls, string: Any): ...
    def find(self, sub: Any, *args: Any): ...
    def rfind(self, sub: Any, *args: Any): ...
    def replace(self, old: Any, new: Any, *args: Any): ...
    def encode(self, *args: Any) -> None: ...
    def decode(self, encoding: str = ..., errors: str = ...): ...
    def startswith(self, prefix: Any, *args: Any): ...
    def endswith(self, prefix: Any, *args: Any): ...
    def split(self, sep: Optional[Any] = ..., maxsplit: int = ...): ...
    def splitlines(self, keepends: bool = ...): ...
    def rsplit(self, sep: Optional[Any] = ..., maxsplit: int = ...): ...
    def partition(self, sep: Any): ...
    def rpartition(self, sep: Any): ...
    def rindex(self, sub: Any, *args: Any) -> None: ...
    def index(self, sub: Any, *args: Any): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    unorderable_err: str = ...
    def __lt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...
    def __native__(self): ...
    def __getattribute__(self, name: Any): ...
    def rstrip(self, bytes_to_strip: Optional[Any] = ...): ...
    def strip(self, bytes_to_strip: Optional[Any] = ...): ...
    def lower(self): ...
    def upper(self): ...
    @classmethod
    def maketrans(cls, frm: Any, to: Any): ...
