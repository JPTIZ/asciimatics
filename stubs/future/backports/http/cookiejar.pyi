from typing import Any, Optional

class Cookie:
    version: Any = ...
    name: Any = ...
    value: Any = ...
    port: Any = ...
    port_specified: Any = ...
    domain: Any = ...
    domain_specified: Any = ...
    domain_initial_dot: Any = ...
    path: Any = ...
    path_specified: Any = ...
    secure: Any = ...
    expires: Any = ...
    discard: Any = ...
    comment: Any = ...
    comment_url: Any = ...
    rfc2109: Any = ...
    def __init__(self, version: Any, name: Any, value: Any, port: Any, port_specified: Any, domain: Any, domain_specified: Any, domain_initial_dot: Any, path: Any, path_specified: Any, secure: Any, expires: Any, discard: Any, comment: Any, comment_url: Any, rest: Any, rfc2109: bool = ...) -> None: ...
    def has_nonstandard_attr(self, name: Any): ...
    def get_nonstandard_attr(self, name: Any, default: Optional[Any] = ...): ...
    def set_nonstandard_attr(self, name: Any, value: Any) -> None: ...
    def is_expired(self, now: Optional[Any] = ...): ...

class CookiePolicy:
    def set_ok(self, cookie: Any, request: Any) -> None: ...
    def return_ok(self, cookie: Any, request: Any) -> None: ...
    def domain_return_ok(self, domain: Any, request: Any): ...
    def path_return_ok(self, path: Any, request: Any): ...

class DefaultCookiePolicy(CookiePolicy):
    DomainStrictNoDots: int = ...
    DomainStrictNonDomain: int = ...
    DomainRFC2965Match: int = ...
    DomainLiberal: int = ...
    DomainStrict: Any = ...
    netscape: Any = ...
    rfc2965: Any = ...
    rfc2109_as_netscape: Any = ...
    hide_cookie2: Any = ...
    strict_domain: Any = ...
    strict_rfc2965_unverifiable: Any = ...
    strict_ns_unverifiable: Any = ...
    strict_ns_domain: Any = ...
    strict_ns_set_initial_dollar: Any = ...
    strict_ns_set_path: Any = ...
    def __init__(self, blocked_domains: Optional[Any] = ..., allowed_domains: Optional[Any] = ..., netscape: bool = ..., rfc2965: bool = ..., rfc2109_as_netscape: Optional[Any] = ..., hide_cookie2: bool = ..., strict_domain: bool = ..., strict_rfc2965_unverifiable: bool = ..., strict_ns_unverifiable: bool = ..., strict_ns_domain: Any = ..., strict_ns_set_initial_dollar: bool = ..., strict_ns_set_path: bool = ...) -> None: ...
    def blocked_domains(self): ...
    def set_blocked_domains(self, blocked_domains: Any) -> None: ...
    def is_blocked(self, domain: Any): ...
    def allowed_domains(self): ...
    def set_allowed_domains(self, allowed_domains: Any) -> None: ...
    def is_not_allowed(self, domain: Any): ...
    def set_ok(self, cookie: Any, request: Any): ...
    def set_ok_version(self, cookie: Any, request: Any): ...
    def set_ok_verifiability(self, cookie: Any, request: Any): ...
    def set_ok_name(self, cookie: Any, request: Any): ...
    def set_ok_path(self, cookie: Any, request: Any): ...
    def set_ok_domain(self, cookie: Any, request: Any): ...
    def set_ok_port(self, cookie: Any, request: Any): ...
    def return_ok(self, cookie: Any, request: Any): ...
    def return_ok_version(self, cookie: Any, request: Any): ...
    def return_ok_verifiability(self, cookie: Any, request: Any): ...
    def return_ok_secure(self, cookie: Any, request: Any): ...
    def return_ok_expires(self, cookie: Any, request: Any): ...
    def return_ok_port(self, cookie: Any, request: Any): ...
    def return_ok_domain(self, cookie: Any, request: Any): ...
    def domain_return_ok(self, domain: Any, request: Any): ...
    def path_return_ok(self, path: Any, request: Any): ...

class Absent: ...

class CookieJar:
    non_word_re: Any = ...
    quote_re: Any = ...
    strict_domain_re: Any = ...
    domain_re: Any = ...
    dots_re: Any = ...
    magic_re: Any = ...
    def __init__(self, policy: Optional[Any] = ...) -> None: ...
    def set_policy(self, policy: Any) -> None: ...
    def add_cookie_header(self, request: Any) -> None: ...
    def make_cookies(self, response: Any, request: Any): ...
    def set_cookie_if_ok(self, cookie: Any, request: Any) -> None: ...
    def set_cookie(self, cookie: Any) -> None: ...
    def extract_cookies(self, response: Any, request: Any) -> None: ...
    def clear(self, domain: Optional[Any] = ..., path: Optional[Any] = ..., name: Optional[Any] = ...) -> None: ...
    def clear_session_cookies(self) -> None: ...
    def clear_expired_cookies(self) -> None: ...
    def __iter__(self) -> Any: ...
    def __len__(self): ...

class LoadError(IOError): ...

class FileCookieJar(CookieJar):
    filename: Any = ...
    delayload: Any = ...
    def __init__(self, filename: Optional[Any] = ..., delayload: bool = ..., policy: Optional[Any] = ...) -> None: ...
    def save(self, filename: Optional[Any] = ..., ignore_discard: bool = ..., ignore_expires: bool = ...) -> None: ...
    def load(self, filename: Optional[Any] = ..., ignore_discard: bool = ..., ignore_expires: bool = ...) -> None: ...
    def revert(self, filename: Optional[Any] = ..., ignore_discard: bool = ..., ignore_expires: bool = ...) -> None: ...

class LWPCookieJar(FileCookieJar):
    def as_lwp_str(self, ignore_discard: bool = ..., ignore_expires: bool = ...): ...
    def save(self, filename: Optional[Any] = ..., ignore_discard: bool = ..., ignore_expires: bool = ...) -> None: ...

class MozillaCookieJar(FileCookieJar):
    magic_re: Any = ...
    header: str = ...
    def save(self, filename: Optional[Any] = ..., ignore_discard: bool = ..., ignore_expires: bool = ...) -> None: ...
