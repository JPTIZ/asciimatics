from future.builtins import *
from future.backports import socketserver
from typing import Any, Optional

class HTTPServer(socketserver.TCPServer):
    allow_reuse_address: int = ...
    server_name: Any = ...
    server_port: Any = ...
    def server_bind(self) -> None: ...

class BaseHTTPRequestHandler(socketserver.StreamRequestHandler):
    sys_version: Any = ...
    server_version: Any = ...
    error_message_format: Any = ...
    error_content_type: Any = ...
    default_request_version: str = ...
    command: Any = ...
    request_version: Any = ...
    close_connection: int = ...
    requestline: Any = ...
    headers: Any = ...
    def parse_request(self): ...
    def handle_expect_100(self): ...
    raw_requestline: Any = ...
    def handle_one_request(self) -> None: ...
    def handle(self) -> None: ...
    def send_error(self, code: Any, message: Optional[Any] = ...) -> None: ...
    def send_response(self, code: Any, message: Optional[Any] = ...) -> None: ...
    def send_response_only(self, code: Any, message: Optional[Any] = ...) -> None: ...
    def send_header(self, keyword: Any, value: Any) -> None: ...
    def end_headers(self) -> None: ...
    def flush_headers(self) -> None: ...
    def log_request(self, code: str = ..., size: str = ...) -> None: ...
    def log_error(self, format: Any, *args: Any) -> None: ...
    def log_message(self, format: Any, *args: Any) -> None: ...
    def version_string(self): ...
    def date_time_string(self, timestamp: Optional[Any] = ...): ...
    def log_date_time_string(self): ...
    weekdayname: Any = ...
    monthname: Any = ...
    def address_string(self): ...
    protocol_version: str = ...
    MessageClass: Any = ...
    responses: Any = ...

class SimpleHTTPRequestHandler(BaseHTTPRequestHandler):
    server_version: Any = ...
    def do_GET(self) -> None: ...
    def do_HEAD(self) -> None: ...
    def send_head(self): ...
    def list_directory(self, path: Any): ...
    def translate_path(self, path: Any): ...
    def copyfile(self, source: Any, outputfile: Any) -> None: ...
    def guess_type(self, path: Any): ...
    extensions_map: Any = ...

class CGIHTTPRequestHandler(SimpleHTTPRequestHandler):
    have_fork: Any = ...
    rbufsize: int = ...
    def do_POST(self) -> None: ...
    def send_head(self): ...
    cgi_info: Any = ...
    def is_cgi(self): ...
    cgi_directories: Any = ...
    def is_executable(self, path: Any): ...
    def is_python(self, path: Any): ...
    def run_cgi(self) -> None: ...
