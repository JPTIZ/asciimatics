from future.builtins import bytes as bytes, dict as dict, int as int, range as range, str as str
from future.utils import ensure_new_type as ensure_new_type
from typing import Any, Optional

def escape(s: Any): ...

MAXINT: Any
MININT: Any
PARSE_ERROR: int
SERVER_ERROR: int
APPLICATION_ERROR: int
SYSTEM_ERROR: int
TRANSPORT_ERROR: int
NOT_WELLFORMED_ERROR: int
UNSUPPORTED_ENCODING: int
INVALID_ENCODING_CHAR: int
INVALID_XMLRPC: int
METHOD_NOT_FOUND: int
INVALID_METHOD_PARAMS: int
INTERNAL_ERROR: int

class Error(Exception): ...

class ProtocolError(Error):
    url: Any = ...
    errcode: Any = ...
    errmsg: Any = ...
    headers: Any = ...
    def __init__(self, url: Any, errcode: Any, errmsg: Any, headers: Any) -> None: ...

class ResponseError(Error): ...

class Fault(Error):
    faultCode: Any = ...
    faultString: Any = ...
    def __init__(self, faultCode: Any, faultString: Any, **extra: Any) -> None: ...
boolean = bool
Boolean = bool

class DateTime:
    value: Any = ...
    def __init__(self, value: int = ...) -> None: ...
    def make_comparable(self, other: Any): ...
    def __lt__(self, other: Any) -> Any: ...
    def __le__(self, other: Any) -> Any: ...
    def __gt__(self, other: Any) -> Any: ...
    def __ge__(self, other: Any) -> Any: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def timetuple(self): ...
    def decode(self, data: Any) -> None: ...
    def encode(self, out: Any) -> None: ...

class Binary:
    data: Any = ...
    def __init__(self, data: Optional[Any] = ...) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...
    def decode(self, data: Any) -> None: ...
    def encode(self, out: Any) -> None: ...

WRAPPERS: Any

class ExpatParser:
    def __init__(self, target: Any) -> None: ...
    def feed(self, data: Any) -> None: ...
    def close(self) -> None: ...

class Marshaller:
    memo: Any = ...
    data: Any = ...
    encoding: Any = ...
    allow_none: Any = ...
    def __init__(self, encoding: Optional[Any] = ..., allow_none: bool = ...) -> None: ...
    dispatch: Any = ...
    def dumps(self, values: Any): ...
    def dump_nil(self, value: Any, write: Any) -> None: ...
    def dump_bool(self, value: Any, write: Any) -> None: ...
    def dump_long(self, value: Any, write: Any) -> None: ...
    dump_int: Any = ...
    def dump_double(self, value: Any, write: Any) -> None: ...
    def dump_unicode(self, value: Any, write: Any, escape: Any = ...) -> None: ...
    def dump_bytes(self, value: Any, write: Any) -> None: ...
    def dump_array(self, value: Any, write: Any) -> None: ...
    def dump_struct(self, value: Any, write: Any, escape: Any = ...) -> None: ...
    def dump_datetime(self, value: Any, write: Any) -> None: ...
    write: Any = ...
    def dump_instance(self, value: Any, write: Any) -> None: ...

class Unmarshaller:
    append: Any = ...
    def __init__(self, use_datetime: bool = ..., use_builtin_types: bool = ...) -> None: ...
    def close(self): ...
    def getmethodname(self): ...
    def xml(self, encoding: Any, standalone: Any) -> None: ...
    def start(self, tag: Any, attrs: Any) -> None: ...
    def data(self, text: Any) -> None: ...
    def end(self, tag: Any): ...
    def end_dispatch(self, tag: Any, data: Any): ...
    dispatch: Any = ...
    def end_nil(self, data: Any) -> None: ...
    def end_boolean(self, data: Any) -> None: ...
    def end_int(self, data: Any) -> None: ...
    def end_double(self, data: Any) -> None: ...
    def end_string(self, data: Any) -> None: ...
    def end_array(self, data: Any) -> None: ...
    def end_struct(self, data: Any) -> None: ...
    def end_base64(self, data: Any) -> None: ...
    def end_dateTime(self, data: Any) -> None: ...
    def end_value(self, data: Any) -> None: ...
    def end_params(self, data: Any) -> None: ...
    def end_fault(self, data: Any) -> None: ...
    def end_methodName(self, data: Any) -> None: ...

class _MultiCallMethod:
    def __init__(self, call_list: Any, name: Any) -> None: ...
    def __getattr__(self, name: Any): ...
    def __call__(self, *args: Any) -> None: ...

class MultiCallIterator:
    results: Any = ...
    def __init__(self, results: Any) -> None: ...
    def __getitem__(self, i: Any): ...

class MultiCall:
    def __init__(self, server: Any) -> None: ...
    def __getattr__(self, name: Any): ...
    def __call__(self): ...

FastMarshaller: Any

FastParser: Any

FastUnmarshaller: Any

def getparser(use_datetime: bool = ..., use_builtin_types: bool = ...): ...
def dumps(params: Any, methodname: Optional[Any] = ..., methodresponse: Optional[Any] = ..., encoding: Optional[Any] = ..., allow_none: bool = ...): ...
def loads(data: Any, use_datetime: bool = ..., use_builtin_types: bool = ...): ...
def gzip_encode(data: Any): ...
def gzip_decode(data: Any): ...

class GzipDecodedResponse:
    io: Any = ...
    def __init__(self, response: Any) -> None: ...
    def close(self) -> None: ...

class _Method:
    def __init__(self, send: Any, name: Any) -> None: ...
    def __getattr__(self, name: Any): ...
    def __call__(self, *args: Any): ...

class Transport:
    user_agent: Any = ...
    accept_gzip_encoding: bool = ...
    encode_threshold: Any = ...
    def __init__(self, use_datetime: bool = ..., use_builtin_types: bool = ...) -> None: ...
    def request(self, host: Any, handler: Any, request_body: Any, verbose: bool = ...): ...
    verbose: Any = ...
    def single_request(self, host: Any, handler: Any, request_body: Any, verbose: bool = ...): ...
    def getparser(self): ...
    def get_host_info(self, host: Any): ...
    def make_connection(self, host: Any): ...
    def close(self) -> None: ...
    def send_request(self, host: Any, handler: Any, request_body: Any, debug: Any): ...
    def send_headers(self, connection: Any, headers: Any) -> None: ...
    def send_content(self, connection: Any, request_body: Any) -> None: ...
    def parse_response(self, response: Any): ...

class SafeTransport(Transport):
    def make_connection(self, host: Any): ...

class ServerProxy:
    def __init__(self, uri: Any, transport: Optional[Any] = ..., encoding: Optional[Any] = ..., verbose: bool = ..., allow_none: bool = ..., use_datetime: bool = ..., use_builtin_types: bool = ...) -> None: ...
    def __getattr__(self, name: Any): ...
    def __call__(self, attr: Any): ...
Server = ServerProxy
