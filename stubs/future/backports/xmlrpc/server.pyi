import pydoc
from future.backports import socketserver as socketserver
from future.backports.http.server import BaseHTTPRequestHandler as BaseHTTPRequestHandler
from future.backports.xmlrpc.client import Fault as Fault, dumps as dumps, gzip_decode as gzip_decode, gzip_encode as gzip_encode, loads as loads
from future.builtins import int as int, str as str
from typing import Any, Optional

def resolve_dotted_attribute(obj: Any, attr: Any, allow_dotted_names: bool = ...): ...
def list_public_methods(obj: Any): ...

class SimpleXMLRPCDispatcher:
    funcs: Any = ...
    instance: Any = ...
    allow_none: Any = ...
    encoding: Any = ...
    use_builtin_types: Any = ...
    def __init__(self, allow_none: bool = ..., encoding: Optional[Any] = ..., use_builtin_types: bool = ...) -> None: ...
    allow_dotted_names: Any = ...
    def register_instance(self, instance: Any, allow_dotted_names: bool = ...) -> None: ...
    def register_function(self, function: Any, name: Optional[Any] = ...) -> None: ...
    def register_introspection_functions(self) -> None: ...
    def register_multicall_functions(self) -> None: ...
    def system_listMethods(self): ...
    def system_methodSignature(self, method_name: Any): ...
    def system_methodHelp(self, method_name: Any): ...
    def system_multicall(self, call_list: Any): ...

class SimpleXMLRPCRequestHandler(BaseHTTPRequestHandler):
    rpc_paths: Any = ...
    encode_threshold: int = ...
    wbufsize: int = ...
    disable_nagle_algorithm: bool = ...
    aepattern: Any = ...
    def accept_encodings(self): ...
    def is_rpc_path_valid(self): ...
    def do_POST(self) -> None: ...
    def decode_request_content(self, data: Any): ...
    def report_404(self) -> None: ...
    def log_request(self, code: str = ..., size: str = ...) -> None: ...

class SimpleXMLRPCServer(socketserver.TCPServer, SimpleXMLRPCDispatcher):
    allow_reuse_address: bool = ...
    logRequests: Any = ...
    def __init__(self, addr: Any, requestHandler: Any = ..., logRequests: bool = ..., allow_none: bool = ..., encoding: Optional[Any] = ..., bind_and_activate: bool = ..., use_builtin_types: bool = ...) -> None: ...

class MultiPathXMLRPCServer(SimpleXMLRPCServer):
    dispatchers: Any = ...
    allow_none: Any = ...
    encoding: Any = ...
    def __init__(self, addr: Any, requestHandler: Any = ..., logRequests: bool = ..., allow_none: bool = ..., encoding: Optional[Any] = ..., bind_and_activate: bool = ..., use_builtin_types: bool = ...) -> None: ...
    def add_dispatcher(self, path: Any, dispatcher: Any): ...
    def get_dispatcher(self, path: Any): ...

class CGIXMLRPCRequestHandler(SimpleXMLRPCDispatcher):
    def __init__(self, allow_none: bool = ..., encoding: Optional[Any] = ..., use_builtin_types: bool = ...) -> None: ...
    def handle_xmlrpc(self, request_text: Any) -> None: ...
    def handle_get(self) -> None: ...
    def handle_request(self, request_text: Optional[Any] = ...) -> None: ...

class ServerHTMLDoc(pydoc.HTMLDoc):
    def markup(self, text: Any, escape: Optional[Any] = ..., funcs: Any = ..., classes: Any = ..., methods: Any = ...): ...
    def docroutine(self, object: Any, name: Any, mod: Optional[Any] = ..., funcs: Any = ..., classes: Any = ..., methods: Any = ..., cl: Optional[Any] = ...): ...
    def docserver(self, server_name: Any, package_documentation: Any, methods: Any): ...

class XMLRPCDocGenerator:
    server_name: str = ...
    server_documentation: str = ...
    server_title: str = ...
    def __init__(self) -> None: ...
    def set_server_title(self, server_title: Any) -> None: ...
    def set_server_name(self, server_name: Any) -> None: ...
    def set_server_documentation(self, server_documentation: Any) -> None: ...
    def generate_html_documentation(self): ...

class DocXMLRPCRequestHandler(SimpleXMLRPCRequestHandler):
    def do_GET(self) -> None: ...

class DocXMLRPCServer(SimpleXMLRPCServer, XMLRPCDocGenerator):
    def __init__(self, addr: Any, requestHandler: Any = ..., logRequests: bool = ..., allow_none: bool = ..., encoding: Optional[Any] = ..., bind_and_activate: bool = ..., use_builtin_types: bool = ...) -> None: ...

class DocCGIXMLRPCRequestHandler(CGIXMLRPCRequestHandler, XMLRPCDocGenerator):
    def handle_get(self) -> None: ...
    def __init__(self) -> None: ...
