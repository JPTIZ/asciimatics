import collections
from collections import namedtuple
from typing import Any, Optional

class _ResultMixinStr:
    def encode(self, encoding: str = ..., errors: str = ...): ...

class _ResultMixinBytes:
    def decode(self, encoding: str = ..., errors: str = ...): ...

class _NetlocResultMixinBase:
    @property
    def username(self): ...
    @property
    def password(self): ...
    @property
    def hostname(self): ...
    @property
    def port(self): ...

class _NetlocResultMixinStr(_NetlocResultMixinBase, _ResultMixinStr): ...
class _NetlocResultMixinBytes(_NetlocResultMixinBase, _ResultMixinBytes): ...

_DefragResultBase = namedtuple('DefragResult', 'url fragment')

_SplitResultBase = namedtuple('SplitResult', 'scheme netloc path query fragment')

_ParseResultBase = namedtuple('ParseResult', 'scheme netloc path params query fragment')

class DefragResult(_DefragResultBase, _ResultMixinStr):
    def geturl(self): ...

class SplitResult(_SplitResultBase, _NetlocResultMixinStr):
    def geturl(self): ...

class ParseResult(_ParseResultBase, _NetlocResultMixinStr):
    def geturl(self): ...

class DefragResultBytes(_DefragResultBase, _ResultMixinBytes):
    def geturl(self): ...

class SplitResultBytes(_SplitResultBase, _NetlocResultMixinBytes):
    def geturl(self): ...

class ParseResultBytes(_ParseResultBase, _NetlocResultMixinBytes):
    def geturl(self): ...

def urlparse(url: Any, scheme: str = ..., allow_fragments: bool = ...): ...
def urlsplit(url: Any, scheme: str = ..., allow_fragments: bool = ...): ...
def urlunparse(components: Any): ...
def urlunsplit(components: Any): ...
def urljoin(base: Any, url: Any, allow_fragments: bool = ...): ...
def urldefrag(url: Any): ...
def unquote_to_bytes(string: Any): ...
def unquote(string: Any, encoding: str = ..., errors: str = ...): ...
def parse_qs(qs: Any, keep_blank_values: bool = ..., strict_parsing: bool = ..., encoding: str = ..., errors: str = ...): ...
def parse_qsl(qs: Any, keep_blank_values: bool = ..., strict_parsing: bool = ..., encoding: str = ..., errors: str = ...): ...
def unquote_plus(string: Any, encoding: str = ..., errors: str = ...): ...

class Quoter(collections.defaultdict):
    safe: Any = ...
    def __init__(self, safe: Any) -> None: ...
    def __missing__(self, b: Any): ...

def quote(string: Any, safe: str = ..., encoding: Optional[Any] = ..., errors: Optional[Any] = ...): ...
def quote_plus(string: Any, safe: str = ..., encoding: Optional[Any] = ..., errors: Optional[Any] = ...): ...
def quote_from_bytes(bs: Any, safe: str = ...): ...
def urlencode(query: Any, doseq: bool = ..., safe: str = ..., encoding: Optional[Any] = ..., errors: Optional[Any] = ...): ...
