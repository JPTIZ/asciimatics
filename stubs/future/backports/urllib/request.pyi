from nturl2path import pathname2url as pathname2url, url2pathname as url2pathname
from typing import Any, Optional

def urlopen(url: Any, data: Optional[Any] = ..., timeout: Any = ..., **_3to2kwargs: Any): ...
def install_opener(opener: Any) -> None: ...
def urlretrieve(url: Any, filename: Optional[Any] = ..., reporthook: Optional[Any] = ..., data: Optional[Any] = ...): ...
def urlcleanup() -> None: ...

class Request:
    full_url: Any = ...
    data: Any = ...
    headers: Any = ...
    unredirected_hdrs: Any = ...
    origin_req_host: Any = ...
    unverifiable: Any = ...
    method: Any = ...
    def __init__(self, url: Any, data: Optional[Any] = ..., headers: Any = ..., origin_req_host: Optional[Any] = ..., unverifiable: bool = ..., method: Optional[Any] = ...) -> None: ...
    def get_method(self): ...
    def get_full_url(self): ...
    def add_data(self, data: Any) -> None: ...
    def has_data(self): ...
    def get_data(self): ...
    def get_type(self): ...
    def get_host(self): ...
    def get_selector(self): ...
    def is_unverifiable(self): ...
    def get_origin_req_host(self): ...
    type: Any = ...
    selector: Any = ...
    host: Any = ...
    def set_proxy(self, host: Any, type: Any) -> None: ...
    def has_proxy(self): ...
    def add_header(self, key: Any, val: Any) -> None: ...
    def add_unredirected_header(self, key: Any, val: Any) -> None: ...
    def has_header(self, header_name: Any): ...
    def get_header(self, header_name: Any, default: Optional[Any] = ...): ...
    def header_items(self): ...

class OpenerDirector:
    addheaders: Any = ...
    handlers: Any = ...
    handle_open: Any = ...
    handle_error: Any = ...
    process_response: Any = ...
    process_request: Any = ...
    def __init__(self) -> None: ...
    def add_handler(self, handler: Any) -> None: ...
    def close(self) -> None: ...
    def open(self, fullurl: Any, data: Optional[Any] = ..., timeout: Any = ...): ...
    def error(self, proto: Any, *args: Any): ...

def build_opener(*handlers: Any): ...

class BaseHandler:
    handler_order: int = ...
    parent: Any = ...
    def add_parent(self, parent: Any) -> None: ...
    def close(self) -> None: ...
    def __lt__(self, other: Any) -> Any: ...

class HTTPErrorProcessor(BaseHandler):
    handler_order: int = ...
    def http_response(self, request: Any, response: Any): ...
    https_response: Any = ...

class HTTPDefaultErrorHandler(BaseHandler):
    def http_error_default(self, req: Any, fp: Any, code: Any, msg: Any, hdrs: Any) -> None: ...

class HTTPRedirectHandler(BaseHandler):
    max_repeats: int = ...
    max_redirections: int = ...
    def redirect_request(self, req: Any, fp: Any, code: Any, msg: Any, headers: Any, newurl: Any): ...
    def http_error_302(self, req: Any, fp: Any, code: Any, msg: Any, headers: Any): ...
    http_error_301: Any = ...
    http_error_303: Any = ...
    http_error_307: Any = ...
    inf_msg: str = ...

class ProxyHandler(BaseHandler):
    handler_order: int = ...
    proxies: Any = ...
    def __init__(self, proxies: Optional[Any] = ...): ...
    def proxy_open(self, req: Any, proxy: Any, type: Any): ...

class HTTPPasswordMgr:
    passwd: Any = ...
    def __init__(self) -> None: ...
    def add_password(self, realm: Any, uri: Any, user: Any, passwd: Any) -> None: ...
    def find_user_password(self, realm: Any, authuri: Any): ...
    def reduce_uri(self, uri: Any, default_port: bool = ...): ...
    def is_suburi(self, base: Any, test: Any): ...

class HTTPPasswordMgrWithDefaultRealm(HTTPPasswordMgr):
    def find_user_password(self, realm: Any, authuri: Any): ...

class AbstractBasicAuthHandler:
    rx: Any = ...
    passwd: Any = ...
    add_password: Any = ...
    retried: int = ...
    def __init__(self, password_mgr: Optional[Any] = ...) -> None: ...
    def reset_retry_count(self) -> None: ...
    def http_error_auth_reqed(self, authreq: Any, host: Any, req: Any, headers: Any): ...
    def retry_http_basic_auth(self, host: Any, req: Any, realm: Any): ...

class HTTPBasicAuthHandler(AbstractBasicAuthHandler, BaseHandler):
    auth_header: str = ...
    def http_error_401(self, req: Any, fp: Any, code: Any, msg: Any, headers: Any): ...

class ProxyBasicAuthHandler(AbstractBasicAuthHandler, BaseHandler):
    auth_header: str = ...
    def http_error_407(self, req: Any, fp: Any, code: Any, msg: Any, headers: Any): ...

class AbstractDigestAuthHandler:
    passwd: Any = ...
    add_password: Any = ...
    retried: int = ...
    nonce_count: int = ...
    last_nonce: Any = ...
    def __init__(self, passwd: Optional[Any] = ...) -> None: ...
    def reset_retry_count(self) -> None: ...
    def http_error_auth_reqed(self, auth_header: Any, host: Any, req: Any, headers: Any): ...
    def retry_http_digest_auth(self, req: Any, auth: Any): ...
    def get_cnonce(self, nonce: Any): ...
    def get_authorization(self, req: Any, chal: Any): ...
    def get_algorithm_impls(self, algorithm: Any): ...
    def get_entity_digest(self, data: Any, chal: Any) -> None: ...

class HTTPDigestAuthHandler(BaseHandler, AbstractDigestAuthHandler):
    auth_header: str = ...
    handler_order: int = ...
    def http_error_401(self, req: Any, fp: Any, code: Any, msg: Any, headers: Any): ...

class ProxyDigestAuthHandler(BaseHandler, AbstractDigestAuthHandler):
    auth_header: str = ...
    handler_order: int = ...
    def http_error_407(self, req: Any, fp: Any, code: Any, msg: Any, headers: Any): ...

class AbstractHTTPHandler(BaseHandler):
    def __init__(self, debuglevel: int = ...) -> None: ...
    def set_http_debuglevel(self, level: Any) -> None: ...
    def do_request_(self, request: Any): ...
    def do_open(self, http_class: Any, req: Any, **http_conn_args: Any): ...

class HTTPHandler(AbstractHTTPHandler):
    def http_open(self, req: Any): ...
    http_request: Any = ...

class HTTPSHandler(AbstractHTTPHandler):
    def __init__(self, debuglevel: int = ..., context: Optional[Any] = ..., check_hostname: Optional[Any] = ...) -> None: ...
    def https_open(self, req: Any): ...
    https_request: Any = ...

class HTTPCookieProcessor(BaseHandler):
    cookiejar: Any = ...
    def __init__(self, cookiejar: Optional[Any] = ...) -> None: ...
    def http_request(self, request: Any): ...
    def http_response(self, request: Any, response: Any): ...
    https_request: Any = ...
    https_response: Any = ...

class UnknownHandler(BaseHandler):
    def unknown_open(self, req: Any) -> None: ...

class FileHandler(BaseHandler):
    def file_open(self, req: Any): ...
    names: Any = ...
    def get_names(self): ...
    def open_local_file(self, req: Any): ...

class FTPHandler(BaseHandler):
    def ftp_open(self, req: Any): ...
    def connect_ftp(self, user: Any, passwd: Any, host: Any, port: Any, dirs: Any, timeout: Any): ...

class CacheFTPHandler(FTPHandler):
    cache: Any = ...
    timeout: Any = ...
    soonest: int = ...
    delay: int = ...
    max_conns: int = ...
    def __init__(self) -> None: ...
    def setTimeout(self, t: Any) -> None: ...
    def setMaxConns(self, m: Any) -> None: ...
    def connect_ftp(self, user: Any, passwd: Any, host: Any, port: Any, dirs: Any, timeout: Any): ...
    def check_cache(self) -> None: ...
    def clear_cache(self) -> None: ...

class URLopener:
    version: Any = ...
    proxies: Any = ...
    key_file: Any = ...
    cert_file: Any = ...
    addheaders: Any = ...
    tempcache: Any = ...
    ftpcache: Any = ...
    def __init__(self, proxies: Optional[Any] = ..., **x509: Any) -> None: ...
    def __del__(self) -> None: ...
    def close(self) -> None: ...
    def cleanup(self) -> None: ...
    def addheader(self, *args: Any) -> None: ...
    type: Any = ...
    def open(self, fullurl: Any, data: Optional[Any] = ...): ...
    def open_unknown(self, fullurl: Any, data: Optional[Any] = ...) -> None: ...
    def open_unknown_proxy(self, proxy: Any, fullurl: Any, data: Optional[Any] = ...) -> None: ...
    def retrieve(self, url: Any, filename: Optional[Any] = ..., reporthook: Optional[Any] = ..., data: Optional[Any] = ...): ...
    def open_http(self, url: Any, data: Optional[Any] = ...): ...
    def http_error(self, url: Any, fp: Any, errcode: Any, errmsg: Any, headers: Any, data: Optional[Any] = ...): ...
    def http_error_default(self, url: Any, fp: Any, errcode: Any, errmsg: Any, headers: Any) -> None: ...
    def open_https(self, url: Any, data: Optional[Any] = ...): ...
    def open_file(self, url: Any): ...
    def open_local_file(self, url: Any): ...
    def open_ftp(self, url: Any): ...
    def open_data(self, url: Any, data: Optional[Any] = ...): ...

class FancyURLopener(URLopener):
    auth_cache: Any = ...
    tries: int = ...
    maxtries: int = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def http_error_default(self, url: Any, fp: Any, errcode: Any, errmsg: Any, headers: Any): ...
    def http_error_302(self, url: Any, fp: Any, errcode: Any, errmsg: Any, headers: Any, data: Optional[Any] = ...): ...
    def redirect_internal(self, url: Any, fp: Any, errcode: Any, errmsg: Any, headers: Any, data: Any): ...
    def http_error_301(self, url: Any, fp: Any, errcode: Any, errmsg: Any, headers: Any, data: Optional[Any] = ...): ...
    def http_error_303(self, url: Any, fp: Any, errcode: Any, errmsg: Any, headers: Any, data: Optional[Any] = ...): ...
    def http_error_307(self, url: Any, fp: Any, errcode: Any, errmsg: Any, headers: Any, data: Optional[Any] = ...): ...
    def http_error_401(self, url: Any, fp: Any, errcode: Any, errmsg: Any, headers: Any, data: Optional[Any] = ..., retry: bool = ...): ...
    def http_error_407(self, url: Any, fp: Any, errcode: Any, errmsg: Any, headers: Any, data: Optional[Any] = ..., retry: bool = ...): ...
    def retry_proxy_http_basic_auth(self, url: Any, realm: Any, data: Optional[Any] = ...): ...
    def retry_proxy_https_basic_auth(self, url: Any, realm: Any, data: Optional[Any] = ...): ...
    def retry_http_basic_auth(self, url: Any, realm: Any, data: Optional[Any] = ...): ...
    def retry_https_basic_auth(self, url: Any, realm: Any, data: Optional[Any] = ...): ...
    def get_user_passwd(self, host: Any, realm: Any, clear_cache: int = ...): ...
    def prompt_user_passwd(self, host: Any, realm: Any): ...

class ftpwrapper:
    user: Any = ...
    passwd: Any = ...
    host: Any = ...
    port: Any = ...
    dirs: Any = ...
    timeout: Any = ...
    refcount: int = ...
    keepalive: Any = ...
    def __init__(self, user: Any, passwd: Any, host: Any, port: Any, dirs: Any, timeout: Optional[Any] = ..., persistent: bool = ...) -> None: ...
    busy: int = ...
    ftp: Any = ...
    def init(self) -> None: ...
    def retrfile(self, file: Any, type: Any): ...
    def endtransfer(self) -> None: ...
    def close(self) -> None: ...
    def file_close(self) -> None: ...
    def real_close(self) -> None: ...

def getproxies(): ...
getproxies = getproxies_environment
proxy_bypass = proxy_bypass_environment
