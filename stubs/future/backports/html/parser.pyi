from future.builtins import *
from future.backports import _markupbase
from typing import Any

interesting_normal: Any
incomplete: Any
entityref: Any
charref: Any
starttagopen: Any
piclose: Any
commentclose: Any
tagfind: Any
tagfind_tolerant: Any
attrfind: Any
attrfind_tolerant: Any
locatestarttagend: Any
locatestarttagend_tolerant: Any
endendtag: Any
endtagfind: Any

class HTMLParseError(Exception):
    msg: Any = ...
    lineno: Any = ...
    offset: Any = ...
    def __init__(self, msg: Any, position: Any = ...) -> None: ...

class HTMLParser(_markupbase.ParserBase):
    CDATA_CONTENT_ELEMENTS: Any = ...
    strict: Any = ...
    def __init__(self, strict: bool = ...) -> None: ...
    rawdata: str = ...
    lasttag: str = ...
    interesting: Any = ...
    cdata_elem: Any = ...
    def reset(self) -> None: ...
    def feed(self, data: Any) -> None: ...
    def close(self) -> None: ...
    def error(self, message: Any) -> None: ...
    def get_starttag_text(self): ...
    def set_cdata_mode(self, elem: Any) -> None: ...
    def clear_cdata_mode(self) -> None: ...
    def goahead(self, end: Any) -> None: ...
    def parse_html_declaration(self, i: Any): ...
    def parse_bogus_comment(self, i: Any, report: int = ...): ...
    def parse_pi(self, i: Any): ...
    def parse_starttag(self, i: Any): ...
    def check_for_whole_start_tag(self, i: Any): ...
    def parse_endtag(self, i: Any): ...
    def handle_startendtag(self, tag: Any, attrs: Any) -> None: ...
    def handle_starttag(self, tag: Any, attrs: Any) -> None: ...
    def handle_endtag(self, tag: Any) -> None: ...
    def handle_charref(self, name: Any) -> None: ...
    def handle_entityref(self, name: Any) -> None: ...
    def handle_data(self, data: Any) -> None: ...
    def handle_comment(self, data: Any) -> None: ...
    def handle_decl(self, decl: Any) -> None: ...
    def handle_pi(self, data: Any) -> None: ...
    def unknown_decl(self, data: Any) -> None: ...
    def unescape(self, s: Any): ...
