from collections import namedtuple as namedtuple
from future.backports.email import errors as errors, utils as utils
from future.backports.urllib.parse import unquote as unquote, unquote_to_bytes as unquote_to_bytes
from future.builtins import int as int, list as list, range as range, str as str, super as super
from typing import Any, Optional

WSP: Any
CFWS_LEADER: Any
SPECIALS: Any
ATOM_ENDS: Any
DOT_ATOM_ENDS: Any
PHRASE_ENDS: Any
TSPECIALS: Any
TOKEN_ENDS: Any
ASPECIALS: Any
ATTRIBUTE_ENDS: Any
EXTENDED_ATTRIBUTE_ENDS: Any

def quote_string(value: Any): ...

class _Folded:
    maxlen: Any = ...
    policy: Any = ...
    lastlen: int = ...
    stickyspace: Any = ...
    firstline: bool = ...
    done: Any = ...
    current: Any = ...
    def __init__(self, maxlen: Any, policy: Any) -> None: ...
    def newline(self) -> None: ...
    def finalize(self) -> None: ...
    def append(self, stoken: Any) -> None: ...
    def append_if_fits(self, token: Any, stoken: Optional[Any] = ...): ...

class TokenList(list):
    token_type: Any = ...
    defects: Any = ...
    def __init__(self, *args: Any, **kw: Any) -> None: ...
    @property
    def value(self): ...
    @property
    def all_defects(self): ...
    @property
    def parts(self) -> None: ...
    def startswith_fws(self): ...
    def pop_leading_fws(self): ...
    def pop_trailing_ws(self): ...
    @property
    def has_fws(self): ...
    def has_leading_comment(self): ...
    @property
    def comments(self): ...
    def fold(self, **_3to2kwargs: Any): ...
    def as_encoded_word(self, charset: Any): ...
    def cte_encode(self, charset: Any, policy: Any): ...
    def pprint(self, indent: str = ...) -> None: ...
    def ppstr(self, indent: str = ...): ...

class WhiteSpaceTokenList(TokenList):
    @property
    def value(self): ...
    @property
    def comments(self): ...

class UnstructuredTokenList(TokenList):
    token_type: str = ...
    def cte_encode(self, charset: Any, policy: Any): ...

class Phrase(TokenList):
    token_type: str = ...
    def cte_encode(self, charset: Any, policy: Any): ...

class Word(TokenList):
    token_type: str = ...

class CFWSList(WhiteSpaceTokenList):
    token_type: str = ...
    def has_leading_comment(self): ...

class Atom(TokenList):
    token_type: str = ...

class Token(TokenList):
    token_type: str = ...

class EncodedWord(TokenList):
    token_type: str = ...
    cte: Any = ...
    charset: Any = ...
    lang: Any = ...
    @property
    def encoded(self): ...

class QuotedString(TokenList):
    token_type: str = ...
    @property
    def content(self): ...
    @property
    def quoted_value(self): ...
    @property
    def stripped_value(self): ...

class BareQuotedString(QuotedString):
    token_type: str = ...
    @property
    def value(self): ...

class Comment(WhiteSpaceTokenList):
    token_type: str = ...
    def quote(self, value: Any): ...
    @property
    def content(self): ...
    @property
    def comments(self): ...

class AddressList(TokenList):
    token_type: str = ...
    @property
    def addresses(self): ...
    @property
    def mailboxes(self): ...
    @property
    def all_mailboxes(self): ...

class Address(TokenList):
    token_type: str = ...
    @property
    def display_name(self): ...
    @property
    def mailboxes(self): ...
    @property
    def all_mailboxes(self): ...

class MailboxList(TokenList):
    token_type: str = ...
    @property
    def mailboxes(self): ...
    @property
    def all_mailboxes(self): ...

class GroupList(TokenList):
    token_type: str = ...
    @property
    def mailboxes(self): ...
    @property
    def all_mailboxes(self): ...

class Group(TokenList):
    token_type: str = ...
    @property
    def mailboxes(self): ...
    @property
    def all_mailboxes(self): ...
    @property
    def display_name(self): ...

class NameAddr(TokenList):
    token_type: str = ...
    @property
    def display_name(self): ...
    @property
    def local_part(self): ...
    @property
    def domain(self): ...
    @property
    def route(self): ...
    @property
    def addr_spec(self): ...

class AngleAddr(TokenList):
    token_type: str = ...
    @property
    def local_part(self): ...
    @property
    def domain(self): ...
    @property
    def route(self): ...
    @property
    def addr_spec(self): ...

class ObsRoute(TokenList):
    token_type: str = ...
    @property
    def domains(self): ...

class Mailbox(TokenList):
    token_type: str = ...
    @property
    def display_name(self): ...
    @property
    def local_part(self): ...
    @property
    def domain(self): ...
    @property
    def route(self): ...
    @property
    def addr_spec(self): ...

class InvalidMailbox(TokenList):
    token_type: str = ...
    @property
    def display_name(self) -> None: ...
    local_part: Any = ...
    domain: Any = ...
    route: Any = ...
    addr_spec: Any = ...

class Domain(TokenList):
    token_type: str = ...
    @property
    def domain(self): ...

class DotAtom(TokenList):
    token_type: str = ...

class DotAtomText(TokenList):
    token_type: str = ...

class AddrSpec(TokenList):
    token_type: str = ...
    @property
    def local_part(self): ...
    @property
    def domain(self): ...
    @property
    def value(self): ...
    @property
    def addr_spec(self): ...

class ObsLocalPart(TokenList):
    token_type: str = ...

class DisplayName(Phrase):
    token_type: str = ...
    @property
    def display_name(self): ...
    @property
    def value(self): ...

class LocalPart(TokenList):
    token_type: str = ...
    @property
    def value(self): ...
    @property
    def local_part(self): ...

class DomainLiteral(TokenList):
    token_type: str = ...
    @property
    def domain(self): ...
    @property
    def ip(self): ...

class MIMEVersion(TokenList):
    token_type: str = ...
    major: Any = ...
    minor: Any = ...

class Parameter(TokenList):
    token_type: str = ...
    sectioned: bool = ...
    extended: bool = ...
    charset: str = ...
    @property
    def section_number(self): ...
    @property
    def param_value(self): ...

class InvalidParameter(Parameter):
    token_type: str = ...

class Attribute(TokenList):
    token_type: str = ...
    @property
    def stripped_value(self): ...

class Section(TokenList):
    token_type: str = ...
    number: Any = ...

class Value(TokenList):
    token_type: str = ...
    @property
    def stripped_value(self): ...

class MimeParameters(TokenList):
    token_type: str = ...
    @property
    def params(self) -> None: ...

class ParameterizedHeaderValue(TokenList):
    @property
    def params(self): ...
    @property
    def parts(self): ...

class ContentType(ParameterizedHeaderValue):
    token_type: str = ...
    maintype: str = ...
    subtype: str = ...

class ContentDisposition(ParameterizedHeaderValue):
    token_type: str = ...
    content_disposition: Any = ...

class ContentTransferEncoding(TokenList):
    token_type: str = ...
    cte: str = ...

class HeaderLabel(TokenList):
    token_type: str = ...

class Header(TokenList):
    token_type: str = ...

class Terminal(str):
    token_type: Any = ...
    defects: Any = ...
    def __new__(cls, value: Any, token_type: Any): ...
    @property
    def all_defects(self): ...
    def cte_encode(self, charset: Any, policy: Any): ...
    def pop_trailing_ws(self) -> None: ...
    def pop_leading_fws(self) -> None: ...
    @property
    def comments(self): ...
    def has_leading_comment(self): ...
    def __getnewargs__(self): ...

class WhiteSpaceTerminal(Terminal):
    @property
    def value(self): ...
    def startswith_fws(self): ...
    has_fws: bool = ...

class ValueTerminal(Terminal):
    @property
    def value(self): ...
    def startswith_fws(self): ...
    has_fws: bool = ...
    def as_encoded_word(self, charset: Any): ...

class EWWhiteSpaceTerminal(WhiteSpaceTerminal):
    @property
    def value(self): ...
    @property
    def encoded(self): ...
    has_fws: bool = ...

DOT: Any
ListSeparator: Any
RouteComponentMarker: Any

def get_fws(value: Any): ...
def get_encoded_word(value: Any): ...
def get_unstructured(value: Any): ...
def get_qp_ctext(value: Any): ...
def get_qcontent(value: Any): ...
def get_atext(value: Any): ...
def get_bare_quoted_string(value: Any): ...
def get_comment(value: Any): ...
def get_cfws(value: Any): ...
def get_quoted_string(value: Any): ...
def get_atom(value: Any): ...
def get_dot_atom_text(value: Any): ...
def get_dot_atom(value: Any): ...
def get_word(value: Any): ...
def get_phrase(value: Any): ...
def get_local_part(value: Any): ...
def get_obs_local_part(value: Any): ...
def get_dtext(value: Any): ...
def get_domain_literal(value: Any): ...
def get_domain(value: Any): ...
def get_addr_spec(value: Any): ...
def get_obs_route(value: Any): ...
def get_angle_addr(value: Any): ...
def get_display_name(value: Any): ...
def get_name_addr(value: Any): ...
def get_mailbox(value: Any): ...
def get_invalid_mailbox(value: Any, endchars: Any): ...
def get_mailbox_list(value: Any): ...
def get_group_list(value: Any): ...
def get_group(value: Any): ...
def get_address(value: Any): ...
def get_address_list(value: Any): ...
def parse_mime_version(value: Any): ...
def get_invalid_parameter(value: Any): ...
def get_ttext(value: Any): ...
def get_token(value: Any): ...
def get_attrtext(value: Any): ...
def get_attribute(value: Any): ...
def get_extended_attrtext(value: Any): ...
def get_extended_attribute(value: Any): ...
def get_section(value: Any): ...
def get_value(value: Any): ...
def get_parameter(value: Any): ...
def parse_mime_parameters(value: Any): ...
def parse_content_type_header(value: Any): ...
def parse_content_disposition_header(value: Any): ...
def parse_content_transfer_encoding_header(value: Any): ...
