import abc
from typing import Any

class _PolicyBase:
    def __init__(self, **kw: Any) -> None: ...
    def clone(self, **kw: Any): ...
    def __setattr__(self, name: Any, value: Any) -> None: ...
    def __add__(self, other: Any): ...

class Policy(_PolicyBase, metaclass=abc.ABCMeta):
    raise_on_defect: bool = ...
    linesep: str = ...
    cte_type: str = ...
    max_line_length: int = ...
    def handle_defect(self, obj: Any, defect: Any) -> None: ...
    def register_defect(self, obj: Any, defect: Any) -> None: ...
    def header_max_count(self, name: Any) -> None: ...
    @abc.abstractmethod
    def header_source_parse(self, sourcelines: Any) -> Any: ...
    @abc.abstractmethod
    def header_store_parse(self, name: Any, value: Any) -> Any: ...
    @abc.abstractmethod
    def header_fetch_parse(self, name: Any, value: Any) -> Any: ...
    @abc.abstractmethod
    def fold(self, name: Any, value: Any) -> Any: ...
    @abc.abstractmethod
    def fold_binary(self, name: Any, value: Any) -> Any: ...

class Compat32(Policy):
    def header_source_parse(self, sourcelines: Any): ...
    def header_store_parse(self, name: Any, value: Any): ...
    def header_fetch_parse(self, name: Any, value: Any): ...
    def fold(self, name: Any, value: Any): ...
    def fold_binary(self, name: Any, value: Any): ...

compat32: Any
