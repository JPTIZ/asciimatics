from future.backports.email import errors as errors, utils as utils
from future.builtins import str as str, super as super
from future.utils import text_to_native_str as text_to_native_str
from typing import Any, Optional

class Address:
    def __init__(self, display_name: str = ..., username: str = ..., domain: str = ..., addr_spec: Optional[Any] = ...) -> None: ...
    @property
    def display_name(self): ...
    @property
    def username(self): ...
    @property
    def domain(self): ...
    @property
    def addr_spec(self): ...
    def __eq__(self, other: Any) -> Any: ...

class Group:
    def __init__(self, display_name: Optional[Any] = ..., addresses: Optional[Any] = ...) -> None: ...
    @property
    def display_name(self): ...
    @property
    def addresses(self): ...
    def __eq__(self, other: Any) -> Any: ...

class BaseHeader(str):
    def __new__(cls, name: Any, value: Any): ...
    def init(self, name: Any, **_3to2kwargs: Any) -> None: ...
    @property
    def name(self): ...
    @property
    def defects(self): ...
    def __reduce__(self): ...
    def fold(self, **_3to2kwargs: Any): ...

class UnstructuredHeader:
    max_count: Any = ...
    value_parser: Any = ...
    @classmethod
    def parse(cls, value: Any, kwds: Any) -> None: ...

class UniqueUnstructuredHeader(UnstructuredHeader):
    max_count: int = ...

class DateHeader:
    max_count: Any = ...
    value_parser: Any = ...
    @classmethod
    def parse(cls, value: Any, kwds: Any) -> None: ...
    def init(self, *args: Any, **kw: Any) -> None: ...
    @property
    def datetime(self): ...

class UniqueDateHeader(DateHeader):
    max_count: int = ...

class AddressHeader:
    max_count: Any = ...
    @staticmethod
    def value_parser(value: Any): ...
    @classmethod
    def parse(cls, value: Any, kwds: Any) -> None: ...
    def init(self, *args: Any, **kw: Any) -> None: ...
    @property
    def groups(self): ...
    @property
    def addresses(self): ...

class UniqueAddressHeader(AddressHeader):
    max_count: int = ...

class SingleAddressHeader(AddressHeader):
    @property
    def address(self): ...

class UniqueSingleAddressHeader(SingleAddressHeader):
    max_count: int = ...

class MIMEVersionHeader:
    max_count: int = ...
    value_parser: Any = ...
    @classmethod
    def parse(cls, value: Any, kwds: Any) -> None: ...
    def init(self, *args: Any, **kw: Any) -> None: ...
    @property
    def major(self): ...
    @property
    def minor(self): ...
    @property
    def version(self): ...

class ParameterizedMIMEHeader:
    max_count: int = ...
    @classmethod
    def parse(cls, value: Any, kwds: Any) -> None: ...
    def init(self, *args: Any, **kw: Any) -> None: ...
    @property
    def params(self): ...

class ContentTypeHeader(ParameterizedMIMEHeader):
    value_parser: Any = ...
    def init(self, *args: Any, **kw: Any) -> None: ...
    @property
    def maintype(self): ...
    @property
    def subtype(self): ...
    @property
    def content_type(self): ...

class ContentDispositionHeader(ParameterizedMIMEHeader):
    value_parser: Any = ...
    def init(self, *args: Any, **kw: Any) -> None: ...
    @property
    def content_disposition(self): ...

class ContentTransferEncodingHeader:
    max_count: int = ...
    value_parser: Any = ...
    @classmethod
    def parse(cls, value: Any, kwds: Any) -> None: ...
    def init(self, *args: Any, **kw: Any) -> None: ...
    @property
    def cte(self): ...

class HeaderRegistry:
    registry: Any = ...
    base_class: Any = ...
    default_class: Any = ...
    def __init__(self, base_class: Any = ..., default_class: Any = ..., use_default_map: bool = ...) -> None: ...
    def map_to_type(self, name: Any, cls: Any) -> None: ...
    def __getitem__(self, name: Any): ...
    def __call__(self, name: Any, value: Any): ...
