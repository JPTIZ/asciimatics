from future.backports.email import charset as _charset
from typing import Any, Optional

Charset = _charset.Charset

class Message:
    policy: Any = ...
    preamble: Any = ...
    defects: Any = ...
    def __init__(self, policy: Any = ...) -> None: ...
    def as_string(self, unixfrom: bool = ..., maxheaderlen: int = ...): ...
    def is_multipart(self): ...
    def set_unixfrom(self, unixfrom: Any) -> None: ...
    def get_unixfrom(self): ...
    def attach(self, payload: Any) -> None: ...
    def get_payload(self, i: Optional[Any] = ..., decode: bool = ...): ...
    def set_payload(self, payload: Any, charset: Optional[Any] = ...) -> None: ...
    def set_charset(self, charset: Any) -> None: ...
    def get_charset(self): ...
    def __len__(self): ...
    def __getitem__(self, name: Any): ...
    def __setitem__(self, name: Any, val: Any) -> None: ...
    def __delitem__(self, name: Any) -> None: ...
    def __contains__(self, name: Any): ...
    def __iter__(self) -> Any: ...
    def keys(self): ...
    def values(self): ...
    def items(self): ...
    def get(self, name: Any, failobj: Optional[Any] = ...): ...
    def set_raw(self, name: Any, value: Any) -> None: ...
    def raw_items(self): ...
    def get_all(self, name: Any, failobj: Optional[Any] = ...): ...
    def add_header(self, _name: Any, _value: Any, **_params: Any) -> None: ...
    def replace_header(self, _name: Any, _value: Any) -> None: ...
    def get_content_type(self): ...
    def get_content_maintype(self): ...
    def get_content_subtype(self): ...
    def get_default_type(self): ...
    def set_default_type(self, ctype: Any) -> None: ...
    def get_params(self, failobj: Optional[Any] = ..., header: str = ..., unquote: bool = ...): ...
    def get_param(self, param: Any, failobj: Optional[Any] = ..., header: str = ..., unquote: bool = ...): ...
    def set_param(self, param: Any, value: Any, header: str = ..., requote: bool = ..., charset: Optional[Any] = ..., language: str = ...) -> None: ...
    def del_param(self, param: Any, header: str = ..., requote: bool = ...) -> None: ...
    def set_type(self, type: Any, header: str = ..., requote: bool = ...) -> None: ...
    def get_filename(self, failobj: Optional[Any] = ...): ...
    def get_boundary(self, failobj: Optional[Any] = ...): ...
    def set_boundary(self, boundary: Any) -> None: ...
    def get_content_charset(self, failobj: Optional[Any] = ...): ...
    def get_charsets(self, failobj: Optional[Any] = ...): ...
