from future.utils import PY2 as PY2, PY3 as PY3
from typing import Any, Optional

flog: Any
REPLACED_MODULES: Any
RENAMES: Any
MOVES: Any

class RenameImport:
    RENAMER: bool = ...
    old_to_new: Any = ...
    new_to_old: Any = ...
    def __init__(self, old_to_new: Any) -> None: ...
    def find_module(self, fullname: Any, path: Optional[Any] = ...): ...
    def load_module(self, name: Any): ...

class hooks:
    old_sys_modules: Any = ...
    hooks_were_installed: Any = ...
    def __enter__(self): ...
    def __exit__(self, *args: Any) -> None: ...

def is_py2_stdlib_module(m: Any): ...
def scrub_py2_sys_modules(): ...
def scrub_future_sys_modules(): ...

class suspend_hooks:
    hooks_were_installed: Any = ...
    def __enter__(self): ...
    def __exit__(self, *args: Any) -> None: ...

def restore_sys_modules(scrubbed: Any) -> None: ...
def install_aliases() -> None: ...
def install_hooks() -> None: ...
def enable_hooks() -> None: ...
def remove_hooks(scrub_sys_modules: bool = ...) -> None: ...
def disable_hooks() -> None: ...
def detect_hooks(): ...
def cache_py2_modules() -> None: ...
def import_(module_name: Any, backport: bool = ...): ...
def from_import(module_name: Any, *symbol_names: Any, **kwargs: Any): ...

class exclude_local_folder_imports:
    module_names: Any = ...
    def __init__(self, *args: Any) -> None: ...
    old_sys_path: Any = ...
    old_sys_modules: Any = ...
    def __enter__(self) -> None: ...
    def __exit__(self, *args: Any) -> None: ...

TOP_LEVEL_MODULES: Any

def import_top_level_modules() -> None: ...
